name: Autonomous VPS Deployment

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/autonomous-vps-deployment.yml'

jobs:
  deploy-to-new-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Deploy MT5 Bridge to NEW VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          timeout: 900s
          command_timeout: 15m
          script: |
            powershell -Command "
            `$ErrorActionPreference = 'Stop'
            
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host '🚀 AUTONOMOUS VPS DEPLOYMENT STARTING' -ForegroundColor Cyan
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host ''
            
            # Step 1: Create directory structure
            Write-Host '📁 Step 1: Creating directory structure...' -ForegroundColor Yellow
            New-Item -Path 'C:\mt5_bridge_service' -ItemType Directory -Force | Out-Null
            New-Item -Path 'C:\mt5_bridge_service\logs' -ItemType Directory -Force | Out-Null
            Write-Host '✅ Directories created' -ForegroundColor Green
            Write-Host ''
            
            # Step 2: Create batch file
            Write-Host '📝 Step 2: Creating start_mt5_bridge.bat...' -ForegroundColor Yellow
            `$batchContent = @'
@echo off
cd /d C:\mt5_bridge_service
SET PYTHON_PATH=C:\Users\trader\AppData\Local\Programs\Python\Python312
if not exist \"%PYTHON_PATH%\python.exe\" (
    SET PYTHON_PATH=C:\Users\Administrator\AppData\Local\Programs\Python\Python312
)
\"%PYTHON_PATH%\python.exe\" mt5_bridge_api_service.py >> logs\service_output.log 2>> logs\service_error.log
exit /b %ERRORLEVEL%
'@
            Set-Content -Path 'C:\mt5_bridge_service\start_mt5_bridge.bat' -Value `$batchContent -Force
            Write-Host '✅ Batch file created' -ForegroundColor Green
            Write-Host ''
            
            # Step 3: Download MT5 Bridge script from repository
            Write-Host '⬇️ Step 3: Downloading MT5 Bridge script...' -ForegroundColor Yellow
            try {
                `$url = 'https://raw.githubusercontent.com/chavapalmarubin-lab/FIDUS/main/vps/mt5_bridge_api_service.py'
                Invoke-WebRequest -Uri `$url -OutFile 'C:\mt5_bridge_service\mt5_bridge_api_service.py' -UseBasicParsing
                Write-Host '✅ MT5 Bridge script downloaded' -ForegroundColor Green
            } catch {
                Write-Host '⚠️ Could not download script from GitHub' -ForegroundColor Yellow
                Write-Host 'Creating placeholder file...' -ForegroundColor Yellow
                Set-Content -Path 'C:\mt5_bridge_service\mt5_bridge_api_service.py' -Value '# MT5 Bridge placeholder - deploy actual file'
            }
            Write-Host ''
            
            # Step 4: Configure firewall
            Write-Host '🔥 Step 4: Configuring firewall rules...' -ForegroundColor Yellow
            try {
                New-NetFirewallRule -DisplayName 'MT5 Bridge API' -Direction Inbound -LocalPort 8000 -Protocol TCP -Action Allow -ErrorAction SilentlyContinue | Out-Null
                Write-Host '✅ Port 8000 opened' -ForegroundColor Green
            } catch {
                Write-Host '⚠️ Firewall rule may already exist' -ForegroundColor Yellow
            }
            Write-Host ''
            
            # Step 5: Check Python installation
            Write-Host '🐍 Step 5: Verifying Python installation...' -ForegroundColor Yellow
            `$pythonPaths = @(
                'C:\Users\trader\AppData\Local\Programs\Python\Python312\python.exe',
                'C:\Users\Administrator\AppData\Local\Programs\Python\Python312\python.exe',
                'C:\Python312\python.exe',
                'C:\Python311\python.exe'
            )
            
            `$pythonFound = `$false
            foreach (`$path in `$pythonPaths) {
                if (Test-Path `$path) {
                    Write-Host \"✅ Python found: `$path\" -ForegroundColor Green
                    `$pythonFound = `$true
                    break
                }
            }
            
            if (-not `$pythonFound) {
                Write-Host '⚠️ Python not found in expected locations' -ForegroundColor Yellow
                Write-Host 'Searching for Python...' -ForegroundColor Yellow
                Get-ChildItem -Path 'C:\' -Recurse -Filter 'python.exe' -ErrorAction SilentlyContinue | Select-Object -First 3 | ForEach-Object { Write-Host \"Found: `$(`$_.FullName)\" -ForegroundColor Cyan }
            }
            Write-Host ''
            
            # Step 6: Create/Update Task Scheduler
            Write-Host '📅 Step 6: Configuring Task Scheduler...' -ForegroundColor Yellow
            
            # Remove existing task if exists
            schtasks /Delete /TN 'MT5BridgeService' /F 2>`$null | Out-Null
            
            # Create new task
            `$action = New-ScheduledTaskAction -Execute 'C:\mt5_bridge_service\start_mt5_bridge.bat' -WorkingDirectory 'C:\mt5_bridge_service'
            `$trigger = New-ScheduledTaskTrigger -AtStartup
            `$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RestartInterval (New-TimeSpan -Minutes 5) -RestartCount 3 -ExecutionTimeLimit (New-TimeSpan -Hours 0)
            `$principal = New-ScheduledTaskPrincipal -UserId 'trader' -LogonType Password -RunLevel Highest
            
            try {
                Register-ScheduledTask -TaskName 'MT5BridgeService' -Action `$action -Trigger `$trigger -Settings `$settings -Principal `$principal -Description 'MT5 Bridge API Service' -Force | Out-Null
                Write-Host '✅ Task Scheduler configured' -ForegroundColor Green
            } catch {
                Write-Host '❌ Failed to register task' -ForegroundColor Red
                Write-Host `$_.Exception.Message -ForegroundColor Red
            }
            Write-Host ''
            
            # Step 7: Start the service
            Write-Host '🚀 Step 7: Starting MT5 Bridge service...' -ForegroundColor Yellow
            try {
                Start-ScheduledTask -TaskName 'MT5BridgeService'
                Write-Host '✅ Service start command sent' -ForegroundColor Green
                
                Write-Host 'Waiting 15 seconds for service to initialize...' -ForegroundColor Cyan
                Start-Sleep -Seconds 15
                
                # Step 8: Verify service
                Write-Host '🔍 Step 8: Verifying service status...' -ForegroundColor Yellow
                try {
                    `$response = Invoke-WebRequest -Uri 'http://localhost:8000/api/mt5/bridge/health' -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
                    Write-Host '✅ SERVICE IS RUNNING!' -ForegroundColor Green
                    Write-Host \"Response: `$(`$response.Content)\" -ForegroundColor Cyan
                } catch {
                    Write-Host '⚠️ Service not responding yet' -ForegroundColor Yellow
                    Write-Host 'Checking task status...' -ForegroundColor Cyan
                    Get-ScheduledTask -TaskName 'MT5BridgeService' | Select-Object TaskName, State, LastRunTime, LastTaskResult
                    
                    Write-Host 'Checking error logs...' -ForegroundColor Cyan
                    if (Test-Path 'C:\mt5_bridge_service\logs\service_error.log') {
                        Get-Content 'C:\mt5_bridge_service\logs\service_error.log' -Tail 20
                    }
                }
            } catch {
                Write-Host '❌ Failed to start service' -ForegroundColor Red
                Write-Host `$_.Exception.Message -ForegroundColor Red
            }
            Write-Host ''
            
            # Final Summary
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host '📊 DEPLOYMENT SUMMARY' -ForegroundColor Cyan
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host ''
            Write-Host 'Directory: C:\mt5_bridge_service' -ForegroundColor White
            Write-Host 'Batch File: Created' -ForegroundColor White
            Write-Host 'Task Scheduler: Configured' -ForegroundColor White
            Write-Host 'Firewall: Port 8000 opened' -ForegroundColor White
            Write-Host ''
            Write-Host '🔗 Test from external:' -ForegroundColor Yellow
            Write-Host '   curl http://92.118.45.135:8000/api/mt5/bridge/health' -ForegroundColor Cyan
            Write-Host ''
            Write-Host '📋 View logs on VPS:' -ForegroundColor Yellow
            Write-Host '   Get-Content C:\mt5_bridge_service\logs\service_error.log -Tail 50' -ForegroundColor Cyan
            Write-Host ''
            "
