name: MT5 Bridge Emergency Restart (NEW VPS)

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for restart'
        required: false
        default: 'Auto-healing triggered by watchdog'

jobs:
  emergency-restart:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Emergency Restart MT5 Bridge on NEW VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 300s
          command_timeout: 5m
          script_stop: false
          script: |
            powershell -Command "
            `$ErrorActionPreference = 'Stop'
            Write-Host '========================================' -ForegroundColor Cyan
            Write-Host 'MT5 BRIDGE EMERGENCY RESTART - NEW VPS' -ForegroundColor Cyan
            Write-Host 'Reason: ${{ github.event.inputs.reason }}' -ForegroundColor Yellow
            Write-Host '========================================' -ForegroundColor Cyan
            Write-Host ''
            
            # Navigate to service directory
            Set-Location C:\mt5_bridge_service
            Write-Host '‚úÖ Working directory:' (Get-Location) -ForegroundColor Yellow
            Write-Host ''
            
            # STEP 1: STOP ALL PYTHON PROCESSES
            Write-Host '=== STEP 1: STOP MT5 BRIDGE SERVICE ===' -ForegroundColor Yellow
            $pythonCount = (Get-Process -Name python -ErrorAction SilentlyContinue).Count
            if ($pythonCount -gt 0) {
                Write-Host 'Stopping' $pythonCount 'Python process(es)...' -ForegroundColor Red
                Get-Process -Name python -ErrorAction SilentlyContinue | Stop-Process -Force
                Start-Sleep -Seconds 5
                Write-Host '‚úÖ All Python processes stopped' -ForegroundColor Green
            } else {
                Write-Host '‚úÖ No Python processes running' -ForegroundColor Green
            }
            
            # Free port 8000
            $connections = Get-NetTCPConnection -LocalPort 8000 -ErrorAction SilentlyContinue
            if ($connections) {
                Write-Host 'Freeing port 8000...' -ForegroundColor Yellow
                $connections | ForEach-Object {
                    Write-Host 'Killing process PID' $_.OwningProcess
                    Stop-Process -Id $_.OwningProcess -Force -ErrorAction SilentlyContinue
                }
                Start-Sleep -Seconds 3
                Write-Host '‚úÖ Port 8000 freed' -ForegroundColor Green
            } else {
                Write-Host '‚úÖ Port 8000 already free' -ForegroundColor Green
            }
            Write-Host ''
            
            # STEP 2: VERIFY CORRECT FILE EXISTS
            Write-Host '=== STEP 2: VERIFY SERVICE FILE ===' -ForegroundColor Yellow
            if (-not (Test-Path 'mt5_bridge_api_service.py')) {
                Write-Host '‚ùå ERROR: mt5_bridge_api_service.py not found!' -ForegroundColor Red
                Exit 1
            }
            Write-Host '‚úÖ Service file found' -ForegroundColor Green
            Write-Host ''
            
            # STEP 3: START SERVICE
            Write-Host '=== STEP 3: START MT5 BRIDGE SERVICE ===' -ForegroundColor Yellow
            Write-Host 'Starting: mt5_bridge_api_service.py' -ForegroundColor Cyan
            
            # Create logs directory if needed
            if (-not (Test-Path 'logs')) {
                New-Item -ItemType Directory -Path 'logs' -Force | Out-Null
            }
            
            # Start service
            $process = Start-Process -FilePath 'python' -ArgumentList 'mt5_bridge_api_service.py' -RedirectStandardOutput 'logs\service_restart.log' -RedirectStandardError 'logs\error_restart.log' -PassThru -WindowStyle Hidden
            Write-Host '‚úÖ Service started with PID:' $process.Id -ForegroundColor Green
            Write-Host 'Waiting 20 seconds for service startup...' -ForegroundColor Yellow
            Start-Sleep -Seconds 20
            Write-Host ''
            
            # STEP 4: VERIFY SERVICE IS HEALTHY
            Write-Host '=== STEP 4: VERIFY SERVICE HEALTH ===' -ForegroundColor Yellow
            $allGood = `$true
            
            try {
                $response = Invoke-WebRequest -Uri 'http://localhost:8000/api/mt5/bridge/health' -Method Get -TimeoutSec 10 -UseBasicParsing
                Write-Host '‚úÖ Bridge Health Check: HTTP' $response.StatusCode -ForegroundColor Green
                
                $healthData = $response.Content | ConvertFrom-Json
                Write-Host '   MongoDB Connected:' $healthData.mongodb.connected
                Write-Host '   MT5 Connected:' $healthData.mt5.connected
                Write-Host '   Accounts Count:' $healthData.mt5.accounts_count
                
            } catch {
                Write-Host '‚ùå Bridge Health Check FAILED!' -ForegroundColor Red
                Write-Host '   Error:' $_.Exception.Message
                $allGood = `$false
            }
            Write-Host ''
            
            # FINAL STATUS
            Write-Host '========================================' -ForegroundColor Cyan
            if ($allGood) {
                Write-Host '‚úÖ‚úÖ‚úÖ RESTART SUCCESSFUL! ‚úÖ‚úÖ‚úÖ' -ForegroundColor Green
                Write-Host 'MT5 Bridge API is running and healthy' -ForegroundColor Green
                Write-Host '========================================' -ForegroundColor Cyan
                Exit 0
            } else {
                Write-Host '‚ùå RESTART FAILED - CHECK LOGS' -ForegroundColor Red
                Write-Host 'Service log (last 30 lines):' -ForegroundColor Yellow
                Get-Content 'logs\service_restart.log' -Tail 30 -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_ }
                Write-Host 'Error log (last 30 lines):' -ForegroundColor Yellow
                Get-Content 'logs\error_restart.log' -Tail 30 -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_ }
                Write-Host '========================================' -ForegroundColor Cyan
                Exit 1
            }
            "
      
      - name: Report Status
        run: |
          echo "‚úÖ Emergency restart workflow completed"
          echo "üìä Check logs above for service status"
          echo "üîó NEW VPS Service URL: http://92.118.45.135:8000"
          echo "üß™ Test command: curl http://92.118.45.135:8000/api/mt5/bridge/health"
          echo "Triggered by: ${{ github.event.inputs.reason }}"
