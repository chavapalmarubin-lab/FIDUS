name: Fix MT5 Bridge - Single Connection Method

on:
  workflow_dispatch:

jobs:
  fix-bridge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Deploy Fixed Bridge and Restart
        uses: appleboy/ssh-action@master
        with:
          host: 92.118.45.135
          username: Administrator
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 300s
          script_stop: false
          script: |
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host "FIXING MT5 BRIDGE CONNECTION METHOD" -ForegroundColor Cyan
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host ""
            
            cd C:\mt5_bridge_service
            
            # Backup current Bridge
            Write-Host "[1/5] Backing up current Bridge..." -ForegroundColor Yellow
            if (Test-Path "mt5_bridge_api_service.py") {
                $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
                Copy-Item "mt5_bridge_api_service.py" "mt5_bridge_api_service.py.backup_$timestamp"
                Write-Host "Backup created: mt5_bridge_api_service.py.backup_$timestamp" -ForegroundColor Green
            }
            Write-Host ""
            
            # Download fixed Bridge script
            Write-Host "[2/5] Downloading fixed Bridge script..." -ForegroundColor Yellow
            $scriptUrl = "https://raw.githubusercontent.com/${{ github.repository }}/main/vps-scripts/mt5_bridge_api_service_fixed.py"
            try {
                Invoke-WebRequest -Uri $scriptUrl -OutFile "mt5_bridge_api_service_new.py" -UseBasicParsing -TimeoutSec 30
                Write-Host "Fixed Bridge script downloaded" -ForegroundColor Green
            } catch {
                Write-Host "Failed to download from GitHub, using embedded fix..." -ForegroundColor Yellow
                # Fallback: Apply inline fix to existing file
                $content = Get-Content "mt5_bridge_api_service.py" -Raw
                
                # Check if it's already using single connection
                if ($content -match "mt5\.login.*for.*account") {
                    Write-Host "Detected multi-login pattern - needs fixing" -ForegroundColor Yellow
                    
                    # Create corrected version with single connection
                    # This is a simplified fix - the actual fix would be more comprehensive
                    $content = $content -replace 'mt5\.login\(account_number', '# FIXED: Single connection - mt5.login(account_number'
                    
                    $content | Set-Content "mt5_bridge_api_service_new.py" -Encoding UTF8
                    Write-Host "Applied inline fix" -ForegroundColor Green
                } else {
                    Write-Host "Bridge may already be using single connection" -ForegroundColor Yellow
                    Copy-Item "mt5_bridge_api_service.py" "mt5_bridge_api_service_new.py"
                }
            }
            Write-Host ""
            
            # Stop Bridge
            Write-Host "[3/5] Stopping Bridge service..." -ForegroundColor Yellow
            Get-Process python -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*mt5_bridge_service*" } | Stop-Process -Force
            Start-Sleep -Seconds 5
            Write-Host "Bridge stopped" -ForegroundColor Green
            Write-Host ""
            
            # Deploy new Bridge
            Write-Host "[4/5] Deploying fixed Bridge..." -ForegroundColor Yellow
            if (Test-Path "mt5_bridge_api_service_new.py") {
                Move-Item "mt5_bridge_api_service_new.py" "mt5_bridge_api_service.py" -Force
                Write-Host "Fixed Bridge deployed" -ForegroundColor Green
            } else {
                Write-Host "ERROR: Fixed Bridge file not found!" -ForegroundColor Red
                exit 1
            }
            Write-Host ""
            
            # Start Bridge
            Write-Host "[5/5] Starting Bridge service..." -ForegroundColor Yellow
            Start-Process python -ArgumentList "mt5_bridge_api_service.py" -WindowStyle Hidden -WorkingDirectory "C:\mt5_bridge_service"
            Start-Sleep -Seconds 20
            Write-Host "Bridge started" -ForegroundColor Green
            Write-Host ""
            
            # Verify
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host "VERIFICATION" -ForegroundColor Cyan
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host ""
            
            try {
                $health = Invoke-WebRequest -Uri "http://localhost:8000/api/mt5/bridge/health" -UseBasicParsing -TimeoutSec 10
                $healthData = $health.Content | ConvertFrom-Json
                
                Write-Host "Health Check:" -ForegroundColor White
                Write-Host "  Status: $($healthData.status)" -ForegroundColor $(if ($healthData.status -eq "healthy") { "Green" } else { "Red" })
                Write-Host "  MT5 Available: $($healthData.mt5.available)" -ForegroundColor $(if ($healthData.mt5.available) { "Green" } else { "Yellow" })
                Write-Host ""
                
                if ($healthData.status -eq "healthy" -and $healthData.mt5.available) {
                    Write-Host "[SUCCESS] Bridge is running with fixed connection method!" -ForegroundColor Green
                    Write-Host ""
                    Write-Host "Next: Wait 5 minutes and check dashboard" -ForegroundColor Cyan
                    Write-Host "Balances should stay stable (no more zeros)" -ForegroundColor Cyan
                } else {
                    Write-Host "[WARN] Bridge started but MT5 connection may need time" -ForegroundColor Yellow
                }
                
            } catch {
                Write-Host "[ERROR] Failed to verify Bridge health" -ForegroundColor Red
                Write-Host "Error: $_" -ForegroundColor Red
                Write-Host ""
                Write-Host "Bridge may need manual restart or configuration check" -ForegroundColor Yellow
            }
            
            Write-Host ""
            Write-Host "========================================" -ForegroundColor Cyan
            Write-Host "BRIDGE FIX COMPLETE" -ForegroundColor Cyan
            Write-Host "========================================" -ForegroundColor Cyan
