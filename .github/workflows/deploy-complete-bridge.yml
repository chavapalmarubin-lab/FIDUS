name: Deploy Complete MT5 Bridge

on:
  workflow_dispatch:
    inputs:
      test_endpoints:
        description: 'Test all endpoints after deployment'
        required: false
        default: 'true'

jobs:
  deploy-complete-bridge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Display Deployment Info
        run: |
          echo "=========================================="
          echo "üöÄ DEPLOYING COMPLETE MT5 BRIDGE"
          echo "=========================================="
          echo "VPS: ${{ secrets.VPS_HOST }}"
          echo "User: ${{ secrets.VPS_USERNAME }}"
          echo "Port: ${{ secrets.VPS_PORT }}"
          echo "Script: mt5_bridge_complete.py"
          echo "Endpoints: /api/mt5/accounts/summary, /account/{id}/info, /account/{id}/trades"
          echo "=========================================="
      
      - name: Stop MT5 Bridge Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            Write-Host "Stopping MT5 Bridge service..."
            schtasks /End /TN MT5BridgeService 2>$null
            if ($LASTEXITCODE -ne 0) { Write-Host "Service not running" }
            Start-Sleep -Seconds 3
            Stop-Process -Name python -Force -ErrorAction SilentlyContinue
            Write-Host "Service stopped"
      
      - name: Backup Current Bridge Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            Write-Host "Creating backup..."
            if (Test-Path C:\mt5_bridge_service\mt5_bridge_api_service.py) {
              Copy-Item C:\mt5_bridge_service\mt5_bridge_api_service.py C:\mt5_bridge_service\mt5_bridge_api_service.py.backup -Force
              Write-Host "Backup created"
            } else {
              Write-Host "No existing file to backup"
            }
      
      - name: Deploy Complete Bridge Script
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          source: "vps-scripts/mt5_bridge_complete.py"
          target: "C:/mt5_bridge_service/"
          strip_components: 1
      
      - name: Rename Uploaded File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "üìù Renaming file..."
            move /Y C:\mt5_bridge_service\mt5_bridge_complete.py C:\mt5_bridge_service\mt5_bridge_api_service.py
            echo "‚úÖ File renamed"
      
      - name: Verify File Upload
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "üîç Verifying file..."
            if exist C:\mt5_bridge_service\mt5_bridge_api_service.py (
              echo "‚úÖ File exists"
              powershell -Command "(Get-Content C:\mt5_bridge_service\mt5_bridge_api_service.py | Select-Object -First 5)"
            ) else (
              echo "‚ùå ERROR: File not found"
              exit 1
            )
      
      - name: Start MT5 Bridge Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "‚ñ∂Ô∏è Starting MT5 Bridge service..."
            schtasks /Run /TN MT5BridgeService
            timeout /t 15 /nobreak
            echo "‚úÖ Service started"
      
      - name: Verify Service is Running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "üîç Checking service status..."
            powershell -Command "Get-Process python -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like '*mt5_bridge*' } | Format-List Id, ProcessName"
      
      - name: Test Health Endpoint
        run: |
          echo "üè• Testing health endpoint..."
          sleep 5
          curl -f http://${{ secrets.VPS_HOST }}:8000/api/mt5/bridge/health || echo "‚ö†Ô∏è  Health check failed"
      
      - name: Test Accounts Summary Endpoint
        if: github.event.inputs.test_endpoints == 'true'
        run: |
          echo "üìä Testing /api/mt5/accounts/summary endpoint..."
          sleep 3
          RESPONSE=$(curl -s http://${{ secrets.VPS_HOST }}:8000/api/mt5/accounts/summary)
          echo "$RESPONSE"
          
          if echo "$RESPONSE" | grep -q "success"; then
            echo "‚úÖ Accounts summary endpoint working"
          else
            echo "‚ùå Accounts summary endpoint failed"
            exit 1
          fi
      
      - name: Test Account Info Endpoint
        if: github.event.inputs.test_endpoints == 'true'
        run: |
          echo "üìà Testing /api/mt5/account/886557/info endpoint..."
          sleep 2
          RESPONSE=$(curl -s http://${{ secrets.VPS_HOST }}:8000/api/mt5/account/886557/info)
          echo "$RESPONSE"
          
          if echo "$RESPONSE" | grep -q "account_id"; then
            echo "‚úÖ Account info endpoint working"
          else
            echo "‚ùå Account info endpoint failed"
            exit 1
          fi
      
      - name: Test Account Trades Endpoint
        if: github.event.inputs.test_endpoints == 'true'
        run: |
          echo "üìâ Testing /api/mt5/account/886557/trades endpoint..."
          sleep 2
          RESPONSE=$(curl -s "http://${{ secrets.VPS_HOST }}:8000/api/mt5/account/886557/trades?limit=100")
          echo "$RESPONSE"
          
          if echo "$RESPONSE" | grep -q "success"; then
            echo "‚úÖ Account trades endpoint working"
          else
            echo "‚ùå Account trades endpoint failed"
            exit 1
          fi
      
      - name: Display Deployment Summary
        run: |
          echo ""
          echo "=========================================="
          echo "‚úÖ DEPLOYMENT COMPLETE!"
          echo "=========================================="
          echo ""
          echo "Deployed Endpoints:"
          echo "  ‚úÖ GET /api/mt5/bridge/health"
          echo "  ‚úÖ GET /api/mt5/accounts/summary"
          echo "  ‚úÖ GET /api/mt5/account/{id}/info"
          echo "  ‚úÖ GET /api/mt5/account/{id}/trades?limit=100"
          echo ""
          echo "Test Commands:"
          echo "  curl http://${{ secrets.VPS_HOST }}:8000/api/mt5/bridge/health"
          echo "  curl http://${{ secrets.VPS_HOST }}:8000/api/mt5/accounts/summary"
          echo "  curl http://${{ secrets.VPS_HOST }}:8000/api/mt5/account/886557/info"
          echo "  curl http://${{ secrets.VPS_HOST }}:8000/api/mt5/account/886557/trades?limit=100"
          echo ""
          echo "Next Steps:"
          echo "  1. Verify backend sync succeeds"
          echo "  2. Check mt5_deals_history collection is populated"
          echo "  3. Verify broker rebates calculation works"
          echo "=========================================="
