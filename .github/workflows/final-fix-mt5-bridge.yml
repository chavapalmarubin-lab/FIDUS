name: FINAL FIX - MT5 Bridge Complete

on:
  workflow_dispatch:

jobs:
  final-fix:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Complete MT5 Bridge Fix
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 600s
          command_timeout: 10m
          debug: true
          script: |
            powershell -Command "
            `$ErrorActionPreference = 'Stop'
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host 'FINAL COMPLETE FIX - MT5 BRIDGE' -ForegroundColor Cyan
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            
            # STEP 1: Stop ALL Python processes
            Write-Host ''
            Write-Host '[STEP 1] Stopping ALL Python processes...' -ForegroundColor Yellow
            `$procs = Get-Process python -ErrorAction SilentlyContinue
            if (`$procs) {
                Write-Host '  Found' `$procs.Count 'process(es)'
                `$procs | ForEach-Object {
                    Write-Host '  Killing PID' `$_.Id
                    Stop-Process -Id `$_.Id -Force
                }
                Start-Sleep -Seconds 5
                Write-Host '✅ All processes stopped' -ForegroundColor Green
            } else {
                Write-Host '✅ No processes running' -ForegroundColor Green
            }
            
            # STEP 2: Disable ALL Task Scheduler tasks
            Write-Host ''
            Write-Host '[STEP 2] Disabling Task Scheduler tasks...' -ForegroundColor Yellow
            `$tasks = @('MT5 Bridge Service', 'MT5BridgeServiceEnhanced', 'MT5BridgeSync')
            `$disabledCount = 0
            foreach (`$taskName in `$tasks) {
                try {
                    Disable-ScheduledTask -TaskName `$taskName -ErrorAction SilentlyContinue
                    Write-Host '  Disabled:' `$taskName
                    `$disabledCount++
                } catch {
                    Write-Host '  Not found:' `$taskName
                }
            }
            Write-Host '✅ Disabled' `$disabledCount 'task(s)' -ForegroundColor Green
            
            # STEP 3: Clean deployment directory
            Write-Host ''
            Write-Host '[STEP 3] Preparing clean deployment...' -ForegroundColor Yellow
            `$deployDir = 'C:\mt5_bridge_service'
            
            Set-Location `$deployDir
            Write-Host '  Working directory:' (Get-Location)
            
            # Remove ALL old Python service files
            `$oldFiles = @('main.py', 'main_production.py', 'mt5_bridge_service_production.py', 'mt5_bridge_service_enhanced.py', 'mt5_bridge_api_service.py')
            foreach (`$file in `$oldFiles) {
                if (Test-Path `$file) {
                    Remove-Item `$file -Force
                    Write-Host '  Removed:' `$file
                }
            }
            Write-Host '✅ Clean slate ready' -ForegroundColor Green
            
            # STEP 4: Download CORRECT file from GitHub
            Write-Host ''
            Write-Host '[STEP 4] Downloading CORRECT file from GitHub...' -ForegroundColor Yellow
            `$rawUrl = 'https://raw.githubusercontent.com/chavapalmarubin-lab/FIDUS/main/vps/mt5_bridge_api_service.py'
            `$destFile = 'mt5_bridge_api_service.py'
            
            Write-Host '  URL:' `$rawUrl
            Write-Host '  Dest:' `$destFile
            
            try {
                `$ProgressPreference = 'SilentlyContinue'
                Invoke-WebRequest -Uri `$rawUrl -OutFile `$destFile -TimeoutSec 30
                Write-Host '✅ Downloaded' -ForegroundColor Green
            } catch {
                Write-Host '  Trying curl...'
                curl -L -o `$destFile `$rawUrl
                if (`$LASTEXITCODE -ne 0) {
                    Write-Host '❌ Download failed!' -ForegroundColor Red
                    Exit 1
                }
                Write-Host '✅ Downloaded via curl' -ForegroundColor Green
            }
            
            # STEP 5: VERIFY downloaded file is CORRECT
            Write-Host ''
            Write-Host '[STEP 5] Verifying file is CORRECT...' -ForegroundColor Yellow
            
            if (-not (Test-Path `$destFile)) {
                Write-Host '❌ File not found!' -ForegroundColor Red
                Exit 1
            }
            
            `$size = (Get-Item `$destFile).Length
            Write-Host '  File size:' `$size 'bytes'
            
            if (`$size -lt 10000) {
                Write-Host '❌ File too small!' -ForegroundColor Red
                Exit 1
            }
            
            `$content = Get-Content `$destFile -Raw
            
            # Critical checks
            if (`$content -notmatch 'FIDUS MT5 Bridge API') {
                Write-Host '❌ Missing correct service name!' -ForegroundColor Red
                Write-Host '  Searching for service name in file...'
                Select-String -Path `$destFile -Pattern 'service.*:.*\".*MT5.*Bridge' | ForEach-Object { Write-Host '  ' `$_.Line }
                Exit 1
            }
            Write-Host '  ✅ Service name: FIDUS MT5 Bridge API' -ForegroundColor Green
            
            if (`$content -notmatch '/api/mt5/bridge/health') {
                Write-Host '❌ Missing /api/mt5/bridge/health route!' -ForegroundColor Red
                Exit 1
            }
            Write-Host '  ✅ Route: /api/mt5/bridge/health' -ForegroundColor Green
            
            if (`$content -notmatch '/api/mt5/account/') {
                Write-Host '❌ Missing /api/mt5/account routes!' -ForegroundColor Red
                Exit 1
            }
            Write-Host '  ✅ Route: /api/mt5/account/{id}/info' -ForegroundColor Green
            
            Write-Host '✅ File fully verified - THIS IS THE CORRECT FILE' -ForegroundColor Green
            
            # STEP 6: Create Task Scheduler task for correct file
            Write-Host ''
            Write-Host '[STEP 6] Creating Task Scheduler task...' -ForegroundColor Yellow
            
            `$action = New-ScheduledTaskAction -Execute 'C:\Users\Administrator\AppData\Local\Programs\Python\Python312\python.exe' -Argument 'C:\mt5_bridge_service\mt5_bridge_api_service.py' -WorkingDirectory 'C:\mt5_bridge_service'
            `$trigger = New-ScheduledTaskTrigger -AtStartup
            `$principal = New-ScheduledTaskPrincipal -UserId 'Administrator' -RunLevel Highest
            `$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
            
            try {
                Unregister-ScheduledTask -TaskName 'MT5 Bridge API Service' -Confirm:`$false -ErrorAction SilentlyContinue
                Register-ScheduledTask -TaskName 'MT5 Bridge API Service' -Action `$action -Trigger `$trigger -Principal `$principal -Settings `$settings -Force | Out-Null
                Write-Host '✅ Task created: MT5 Bridge API Service' -ForegroundColor Green
            } catch {
                Write-Host '⚠️  Task creation failed (continuing)' -ForegroundColor Yellow
            }
            
            # STEP 7: Start the service
            Write-Host ''
            Write-Host '[STEP 7] Starting MT5 Bridge API service...' -ForegroundColor Yellow
            
            if (-not (Test-Path 'logs')) {
                New-Item -ItemType Directory -Path 'logs' -Force | Out-Null
            }
            
            `$pythonPath = 'C:\Users\Administrator\AppData\Local\Programs\Python\Python312\python.exe'
            `$process = Start-Process -FilePath `$pythonPath -ArgumentList 'mt5_bridge_api_service.py' -RedirectStandardOutput 'logs\final_fix.log' -RedirectStandardError 'logs\final_fix_error.log' -PassThru -WindowStyle Hidden
            
            Write-Host '  PID:' `$process.Id
            Write-Host '  Waiting 20 seconds for startup...'
            Start-Sleep -Seconds 20
            Write-Host '✅ Service started' -ForegroundColor Green
            
            # STEP 8: Comprehensive verification
            Write-Host ''
            Write-Host '[STEP 8] FINAL VERIFICATION...' -ForegroundColor Yellow
            
            `$allGood = `$true
            
            # Test root endpoint
            Write-Host ''
            Write-Host '  Testing: http://localhost:8000/' -ForegroundColor Cyan
            try {
                `$response = Invoke-RestMethod -Uri 'http://localhost:8000/' -TimeoutSec 15
                `$serviceName = `$response.service
                Write-Host '    HTTP 200 OK' -ForegroundColor Green
                Write-Host '    Service name:' `$serviceName
                
                if (`$serviceName -eq 'FIDUS MT5 Bridge API') {
                    Write-Host '    ✅ CORRECT SERVICE NAME!' -ForegroundColor Green
                } else {
                    Write-Host '    ❌ WRONG! Expected: FIDUS MT5 Bridge API' -ForegroundColor Red
                    `$allGood = `$false
                }
            } catch {
                Write-Host '    ❌ FAILED:' `$_.Exception.Message -ForegroundColor Red
                `$allGood = `$false
            }
            
            # Test bridge health endpoint
            Write-Host ''
            Write-Host '  Testing: http://localhost:8000/api/mt5/bridge/health' -ForegroundColor Cyan
            try {
                `$response = Invoke-RestMethod -Uri 'http://localhost:8000/api/mt5/bridge/health' -TimeoutSec 15
                Write-Host '    ✅ HTTP 200 OK - Endpoint exists!' -ForegroundColor Green
            } catch {
                Write-Host '    ❌ FAILED:' `$_.Exception.Message -ForegroundColor Red
                `$allGood = `$false
            }
            
            # Test account endpoint
            Write-Host ''
            Write-Host '  Testing: http://localhost:8000/api/mt5/account/886557/info' -ForegroundColor Cyan
            try {
                `$response = Invoke-RestMethod -Uri 'http://localhost:8000/api/mt5/account/886557/info' -TimeoutSec 15
                Write-Host '    ✅ HTTP 200 OK - Endpoint exists!' -ForegroundColor Green
            } catch {
                Write-Host '    ❌ FAILED:' `$_.Exception.Message -ForegroundColor Red
                `$allGood = `$false
            }
            
            # FINAL RESULT
            Write-Host ''
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            
            if (`$allGood) {
                Write-Host '✅✅✅ FIX COMPLETE AND VERIFIED! ✅✅✅' -ForegroundColor Green
                Write-Host '' -ForegroundColor Green
                Write-Host 'SUCCESS SUMMARY:' -ForegroundColor Green
                Write-Host '  ✅ All old processes stopped' -ForegroundColor Green
                Write-Host '  ✅ Task Scheduler tasks disabled' -ForegroundColor Green
                Write-Host '  ✅ Correct file downloaded from GitHub' -ForegroundColor Green
                Write-Host '  ✅ File verified (FIDUS MT5 Bridge API)' -ForegroundColor Green
                Write-Host '  ✅ Service started successfully' -ForegroundColor Green
                Write-Host '  ✅ All endpoints responding correctly' -ForegroundColor Green
                Write-Host '  ✅ Service name: FIDUS MT5 Bridge API' -ForegroundColor Green
                Write-Host '' -ForegroundColor Green
                Write-Host 'MT5 BRIDGE 404 ISSUE - PERMANENTLY RESOLVED!' -ForegroundColor Green
                Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
                Exit 0
            } else {
                Write-Host '❌ FIX INCOMPLETE' -ForegroundColor Red
                Write-Host ''
                Write-Host 'Service log:' -ForegroundColor Yellow
                Get-Content 'logs\final_fix.log' -Tail 50 -ErrorAction SilentlyContinue | ForEach-Object { Write-Host `$_ }
                Write-Host ''
                Write-Host 'Error log:' -ForegroundColor Yellow
                Get-Content 'logs\final_fix_error.log' -Tail 50 -ErrorAction SilentlyContinue | ForEach-Object { Write-Host `$_ }
                Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
                Exit 1
            }
            "
