name: Fresh Install - MT5 Bridge API

on:
  workflow_dispatch:

jobs:
  fresh-install:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Fresh Installation on Clean VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 900s
          command_timeout: 15m
          debug: true
          script: |
            powershell -Command "
            `$ErrorActionPreference = 'Stop'
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host 'FRESH INSTALLATION - MT5 BRIDGE API' -ForegroundColor Cyan
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host ''
            Write-Host 'Installing on CLEAN VPS (no legacy issues)' -ForegroundColor Green
            Write-Host ''
            
            # STEP 1: Prepare directory
            Write-Host '═══ STEP 1: PREPARE DIRECTORY ═══' -ForegroundColor Yellow
            `$installDir = 'C:\fidus_mt5_bridge'
            
            if (-not (Test-Path `$installDir)) {
                New-Item -ItemType Directory -Path `$installDir -Force | Out-Null
                Write-Host '✅ Created directory:' `$installDir -ForegroundColor Green
            } else {
                Write-Host '✅ Directory exists:' `$installDir -ForegroundColor Green
            }
            
            Set-Location `$installDir
            Write-Host '  Working directory:' (Get-Location)
            Write-Host ''
            
            # STEP 2: Download service file
            Write-Host '═══ STEP 2: DOWNLOAD SERVICE FILE ═══' -ForegroundColor Yellow
            `$url = 'https://raw.githubusercontent.com/chavapalmarubin-lab/FIDUS/main/vps/mt5_bridge_api_service.py'
            `$file = 'mt5_bridge_api_service.py'
            
            Write-Host '  Source:' `$url
            Write-Host '  Target:' `$file
            
            `$ProgressPreference = 'SilentlyContinue'
            try {
                Invoke-WebRequest -Uri `$url -OutFile `$file -TimeoutSec 30
                Write-Host '✅ Downloaded via Invoke-WebRequest' -ForegroundColor Green
            } catch {
                Write-Host '  Trying curl...'
                curl -L -o `$file `$url
                if (`$LASTEXITCODE -eq 0) {
                    Write-Host '✅ Downloaded via curl' -ForegroundColor Green
                } else {
                    Write-Host '❌ Download failed!' -ForegroundColor Red
                    Exit 1
                }
            }
            Write-Host ''
            
            # STEP 3: Verify file content
            Write-Host '═══ STEP 3: VERIFY FILE CONTENT ═══' -ForegroundColor Yellow
            
            if (-not (Test-Path `$file)) {
                Write-Host '❌ File not found!' -ForegroundColor Red
                Exit 1
            }
            
            `$size = (Get-Item `$file).Length
            Write-Host '  File size:' `$size 'bytes'
            
            if (`$size -lt 10000) {
                Write-Host '❌ File too small!' -ForegroundColor Red
                Exit 1
            }
            Write-Host '  ✅ File size OK' -ForegroundColor Green
            
            `$content = Get-Content `$file -Raw
            
            # Verify service name
            if (`$content -match 'FIDUS MT5 Bridge API') {
                Write-Host '  ✅ Service name verified: FIDUS MT5 Bridge API' -ForegroundColor Green
            } else {
                Write-Host '  ❌ Wrong service name!' -ForegroundColor Red
                Exit 1
            }
            
            # Verify routes
            if (`$content -match '/api/mt5/bridge/health') {
                Write-Host '  ✅ Route verified: /api/mt5/bridge/health' -ForegroundColor Green
            } else {
                Write-Host '  ❌ Route missing!' -ForegroundColor Red
                Exit 1
            }
            
            if (`$content -match '/api/mt5/account/') {
                Write-Host '  ✅ Route verified: /api/mt5/account/{id}/info' -ForegroundColor Green
            } else {
                Write-Host '  ❌ Route missing!' -ForegroundColor Red
                Exit 1
            }
            
            Write-Host '✅ File fully verified - CORRECT SERVICE FILE' -ForegroundColor Green
            Write-Host ''
            
            # STEP 4: Create .env file
            Write-Host '═══ STEP 4: CREATE .ENV FILE ═══' -ForegroundColor Yellow
            
            `$envContent = @'
MONGODB_URI=mongodb+srv://emergent-ops:BpzaxqxDCjz1yWY4@fidus.ylp9be2.mongodb.net/fidus_production
MT5_PASSWORD=Fidus13!
'@
            
            Set-Content -Path '.env' -Value `$envContent
            Write-Host '✅ .env file created' -ForegroundColor Green
            Write-Host ''
            
            # STEP 5: Install Python packages
            Write-Host '═══ STEP 5: INSTALL PYTHON PACKAGES ═══' -ForegroundColor Yellow
            `$pythonPath = 'C:\Users\Administrator\AppData\Local\Programs\Python\Python312\python.exe'
            
            if (-not (Test-Path `$pythonPath)) {
                Write-Host '❌ Python not found at expected path!' -ForegroundColor Red
                Exit 1
            }
            
            Write-Host '  Python:' `$pythonPath
            Write-Host '  Installing required packages...'
            
            & `$pythonPath -m pip install --quiet --upgrade pip
            & `$pythonPath -m pip install --quiet fastapi uvicorn MetaTrader5 python-dotenv pymongo httpx pydantic
            
            Write-Host '✅ Packages installed' -ForegroundColor Green
            Write-Host ''
            
            # STEP 6: Create logs directory
            Write-Host '═══ STEP 6: CREATE LOGS DIRECTORY ═══' -ForegroundColor Yellow
            if (-not (Test-Path 'logs')) {
                New-Item -ItemType Directory -Path 'logs' -Force | Out-Null
            }
            Write-Host '✅ Logs directory ready' -ForegroundColor Green
            Write-Host ''
            
            # STEP 7: Test service startup
            Write-Host '═══ STEP 7: TEST SERVICE STARTUP ═══' -ForegroundColor Yellow
            Write-Host '  Starting service...'
            
            `$process = Start-Process -FilePath `$pythonPath -ArgumentList `$file -RedirectStandardOutput 'logs\install.log' -RedirectStandardError 'logs\install_error.log' -PassThru -WindowStyle Hidden
            
            Write-Host '  PID:' `$process.Id
            Write-Host '  Waiting 25 seconds for startup...'
            Start-Sleep -Seconds 25
            
            # Check if process is still running
            `$stillRunning = Get-Process -Id `$process.Id -ErrorAction SilentlyContinue
            if (`$stillRunning) {
                Write-Host '✅ Service is running' -ForegroundColor Green
            } else {
                Write-Host '❌ Service crashed!' -ForegroundColor Red
                Write-Host 'Error log:' -ForegroundColor Yellow
                Get-Content 'logs\install_error.log' -ErrorAction SilentlyContinue
                Exit 1
            }
            Write-Host ''
            
            # STEP 8: Verify endpoints
            Write-Host '═══ STEP 8: VERIFY ENDPOINTS ═══' -ForegroundColor Yellow
            
            `$allSuccess = `$true
            
            # Test root endpoint
            Write-Host ''
            Write-Host '  Testing: http://localhost:8000/' -ForegroundColor Cyan
            try {
                `$response = Invoke-RestMethod -Uri 'http://localhost:8000/' -TimeoutSec 20
                `$serviceName = `$response.service
                Write-Host '    HTTP 200 OK'
                Write-Host '    Service name:' `$serviceName
                
                if (`$serviceName -eq 'FIDUS MT5 Bridge API') {
                    Write-Host '    ✅ CORRECT SERVICE NAME!' -ForegroundColor Green
                } else {
                    Write-Host '    ❌ WRONG! Expected: FIDUS MT5 Bridge API, Got:' `$serviceName -ForegroundColor Red
                    `$allSuccess = `$false
                }
            } catch {
                Write-Host '    ❌ FAILED:' `$_.Exception.Message -ForegroundColor Red
                `$allSuccess = `$false
            }
            
            # Test bridge health
            Write-Host ''
            Write-Host '  Testing: http://localhost:8000/api/mt5/bridge/health' -ForegroundColor Cyan
            try {
                `$response = Invoke-RestMethod -Uri 'http://localhost:8000/api/mt5/bridge/health' -TimeoutSec 20
                Write-Host '    ✅ HTTP 200 OK - Endpoint exists!' -ForegroundColor Green
            } catch {
                Write-Host '    ❌ FAILED:' `$_.Exception.Message -ForegroundColor Red
                `$allSuccess = `$false
            }
            
            # Test account endpoint
            Write-Host ''
            Write-Host '  Testing: http://localhost:8000/api/mt5/account/886557/info' -ForegroundColor Cyan
            try {
                `$response = Invoke-RestMethod -Uri 'http://localhost:8000/api/mt5/account/886557/info' -TimeoutSec 20
                Write-Host '    ✅ HTTP 200 OK - Account info working!' -ForegroundColor Green
            } catch {
                Write-Host '    ❌ FAILED:' `$_.Exception.Message -ForegroundColor Red
                `$allSuccess = `$false
            }
            
            # External access test
            Write-Host ''
            Write-Host '  Testing: http://92.118.45.135:8000/' -ForegroundColor Cyan
            try {
                `$extResponse = Invoke-RestMethod -Uri 'http://92.118.45.135:8000/' -TimeoutSec 20
                if (`$extResponse.service -eq 'FIDUS MT5 Bridge API') {
                    Write-Host '    ✅ External access OK!' -ForegroundColor Green
                } else {
                    Write-Host '    ⚠️  External returns:' `$extResponse.service -ForegroundColor Yellow
                }
            } catch {
                Write-Host '    ⚠️  External access test inconclusive' -ForegroundColor Yellow
            }
            
            if (-not `$allSuccess) {
                Write-Host ''
                Write-Host '❌ ENDPOINT VERIFICATION FAILED' -ForegroundColor Red
                Exit 1
            }
            
            Write-Host ''
            Write-Host '✅ ALL ENDPOINTS VERIFIED!' -ForegroundColor Green
            Write-Host ''
            
            # STEP 9: Create Task Scheduler task
            Write-Host '═══ STEP 9: CREATE TASK SCHEDULER TASK ═══' -ForegroundColor Yellow
            
            `$taskName = 'MT5 Bridge API Service'
            `$action = New-ScheduledTaskAction -Execute `$pythonPath -Argument \"`$installDir\`$file\" -WorkingDirectory `$installDir
            `$trigger = New-ScheduledTaskTrigger -AtStartup
            
            # Add a second trigger to restart every 5 minutes
            `$trigger2 = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 5) -RepetitionDuration ([TimeSpan]::MaxValue)
            
            `$principal = New-ScheduledTaskPrincipal -UserId 'Administrator' -RunLevel Highest
            `$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -MultipleInstances IgnoreNew
            
            try {
                # Remove old task if exists
                Unregister-ScheduledTask -TaskName `$taskName -Confirm:`$false -ErrorAction SilentlyContinue
                
                # Register new task
                Register-ScheduledTask -TaskName `$taskName -Action `$action -Trigger `$trigger,`$trigger2 -Principal `$principal -Settings `$settings -Force | Out-Null
                
                Write-Host '✅ Task Scheduler configured' -ForegroundColor Green
                Write-Host '  Task name:' `$taskName
                Write-Host '  Triggers: At startup + every 5 minutes'
                
                # Verify task exists
                `$task = Get-ScheduledTask -TaskName `$taskName -ErrorAction SilentlyContinue
                if (`$task) {
                    Write-Host '  Status:' `$task.State
                    Write-Host '✅ Task verified' -ForegroundColor Green
                }
            } catch {
                Write-Host '❌ Task creation failed:' `$_.Exception.Message -ForegroundColor Red
                Exit 1
            }
            
            Write-Host ''
            
            # FINAL SUMMARY
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Write-Host '✅✅✅ FRESH INSTALLATION COMPLETE! ✅✅✅' -ForegroundColor Green
            Write-Host ''
            Write-Host 'INSTALLATION SUMMARY:' -ForegroundColor Green
            Write-Host '  ✅ Directory: C:\fidus_mt5_bridge' -ForegroundColor Green
            Write-Host '  ✅ Service file downloaded and verified' -ForegroundColor Green
            Write-Host '  ✅ .env file created with credentials' -ForegroundColor Green
            Write-Host '  ✅ Python packages installed' -ForegroundColor Green
            Write-Host '  ✅ Service started successfully' -ForegroundColor Green
            Write-Host '  ✅ All endpoints verified' -ForegroundColor Green
            Write-Host '  ✅ Task Scheduler configured' -ForegroundColor Green
            Write-Host ''
            Write-Host 'SERVICE DETAILS:' -ForegroundColor Green
            Write-Host '  Service Name: FIDUS MT5 Bridge API' -ForegroundColor Green
            Write-Host '  URL: http://92.118.45.135:8000' -ForegroundColor Green
            Write-Host '  Health: http://92.118.45.135:8000/api/mt5/bridge/health' -ForegroundColor Green
            Write-Host ''
            Write-Host 'AUTO-START CONFIGURED:' -ForegroundColor Green
            Write-Host '  - Starts on VPS boot' -ForegroundColor Green
            Write-Host '  - Restarts every 5 minutes (if stopped)' -ForegroundColor Green
            Write-Host ''
            Write-Host 'MT5 BRIDGE 404 ISSUE - PERMANENTLY RESOLVED!' -ForegroundColor Green
            Write-Host '═══════════════════════════════════════════' -ForegroundColor Cyan
            Exit 0
            "
