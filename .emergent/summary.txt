<analysis>
The trajectory outlines a multi-phase project to stabilize and enhance the FIDUS platform. Initially, the project was in a chaotic state with critical bugs in JWT authentication, data integrity (specifically for a client named Alejandro), and a severely misconfigured MongoDB connection that defaulted to localhost.

The user intervened by providing a comprehensive 10-phase guide, resetting the focus to a structured rebuild, starting with a production-grade MongoDB Atlas integration. **Phase 1 (Discovery & Analysis)** involved a thorough codebase audit, which uncovered the root causes of the instability: a critical MongoDB Atlas SSL/TLS connection failure and a missing  package in the backend dependencies. After a collaborative debugging process involving IP whitelisting and credential updates, the database connectivity was successfully restored.

**Phase 2 (Database Architecture)** focused on establishing a robust data foundation. This included designing schemas, creating Pydantic models, implementing a full repository pattern for data access, and migrating existing user data to a new, validated schema.

**Phase 3 (MT5 Integration)** introduced a bridge architecture to circumvent the issue of the  package being Windows-only. A separate FastAPI service was designed to run on a Windows VPS, acting as an intermediary between the main Linux-based backend and the MT5 terminal. The work concluded with the creation of an automated PowerShell setup script for this bridge service. When that script failed due to an old PowerShell version on the user's VPS, a simplified, manual command-line setup guide was provided as the final step.
</analysis>

<product_requirements>
The FIDUS platform is an investment management system for internal admin users. The core requirements are:

1.  **Secure User Management:** Admins must log in securely. The system uses a combination of JWT tokens and individual Google Workspace integration via OAuth 2.0 for CRM functions (Gmail, Calendar, Drive).
2.  **Production-Grade Database:** All application data (users, clients, investments, CRM prospects, etc.) must be stored in a reliable, production-ready MongoDB Atlas cluster, completely replacing any mock or local data.
3.  **Real-Time Financial Data:** The platform must connect to the MetaTrader5 (MT5) trading API to fetch real-time client account data, including balances, equity, and open positions. This data is crucial for accurate AUM (Assets Under Management) calculations displayed on the admin dashboard.
4.  **Data Integrity:** The system must enforce strong data consistency. A previous incident involving the erroneous creation of multiple investments for a single client highlighted the need for robust validation, duplicate prevention, and data cleanup capabilities. The architecture must be resilient to prevent such corruption in the future.
</product_requirements>

<key_technical_concepts>
- **Backend:** Python with FastAPI, leveraging asynchronous programming (async/await) and Pydantic for data validation.
- **Frontend:** React.js.
- **Database:** MongoDB Atlas, accessed asynchronously using the  library.
- **Authentication:** JWT for securing internal APIs and Google OAuth 2.0 for integrating with user Google Workspace accounts.
- **Architecture:** A microservice-like bridge architecture was designed for MT5 integration, where the main Linux-based FastAPI backend communicates via a REST API with a secondary FastAPI service running on a Windows VPS.
</key_technical_concepts>

<code_architecture>
The application is structured into a React frontend, a Python/FastAPI backend, and a new, separate MT5 bridge service.



-   ****: Crucial for environment configuration. It was updated multiple times to fix the  (correcting the password) and add new variables for the MT5 bridge service (, ).
-   ****: The main FastAPI application file. It was significantly modified to integrate the new repository pattern for database access and to add new API endpoints for interacting with the MT5 service.
-   **, , **: These new directories were created during Phase 2 to implement a clean, maintainable repository pattern. This separates data access logic from the main application logic, using Pydantic models for type-safe data handling.
-   ****: This new file contains the client class responsible for making HTTP requests to the MT5 bridge service running on the Windows VPS.
-   ****: This directory holds various utility and migration scripts.  was created and run to optimize database performance.  was used to migrate existing user data to the new schema.
-   ****: A new, self-contained FastAPI application designed to run on a Windows VPS.
    -   ****: The core of the bridge service. It exposes REST API endpoints that the main FIDUS backend can call. Internally, it uses the  Python package to communicate directly with the MT5 trading terminal.
    -   ****: An automated PowerShell script created to handle the entire deployment of the bridge service on the Windows VPS, from creating files to installing dependencies and configuring the firewall.
</code_architecture>

<pending_tasks>
- **Deploy MT5 Bridge Service:** The primary pending task is for the user to set up the MT5 bridge service on the Windows VPS (IP: ) using the provided manual command-line instructions, since the PowerShell script was incompatible with their environment.
- **Configure and Test MT5:** Once deployed, the service needs to be configured with actual MT5 account credentials and tested end-to-end from the FIDUS application.
- **Original Pending Tasks:** The original tasks like implementing bcrypt hashing, DocuSign, and the Advanced Dashboard remain pending as the focus shifted to the critical database and MT5 integration.
</pending_tasks>

<current_work>
The AI engineer was in the final stages of **Phase 3: MetaTrader 5 Integration**. The core task was to enable the deployment of the MT5 bridge service on the user's Windows VPS. The user reported being unable to access the VPS via RDP and, to simplify the process, requested a single automated setup script.

The engineer created a comprehensive PowerShell script () designed to automate the entire setup: creating directories, writing the Python service code () and dependencies (), installing packages, generating an API key, creating a  file, and adding a firewall rule.

However, the user reported that this script failed on the VPS due to an older, incompatible version of PowerShell. In response to this, the engineer's final action was to provide a simplified, fully manual, step-by-step guide. This guide instructs the user on how to use basic Command Prompt commands (, , etc.) and Notepad to create the necessary files (, , ), install dependencies via 
Usage:   
  pip <command> [options]

Commands:
  install                     Install packages.
  lock                        Generate a lock file.
  download                    Download packages.
  uninstall                   Uninstall packages.
  freeze                      Output installed packages in requirements format.
  inspect                     Inspect the python environment.
  list                        List installed packages.
  show                        Show information about installed packages.
  check                       Verify installed packages have compatible dependencies.
  config                      Manage local and global configuration.
  search                      Search PyPI for packages.
  cache                       Inspect and manage pip's wheel cache.
  index                       Inspect information available from package indexes.
  wheel                       Build wheels from your requirements.
  hash                        Compute hashes of package archives.
  completion                  A helper command used for command completion.
  debug                       Show information useful for debugging.
  help                        Show help for commands.

General Options:
  -h, --help                  Show help.
  --debug                     Let unhandled exceptions propagate outside the
                              main subroutine, instead of logging them to
                              stderr.
  --isolated                  Run pip in an isolated mode, ignoring
                              environment variables and user configuration.
  --require-virtualenv        Allow pip to only run in a virtual environment;
                              exit with an error otherwise.
  --python <python>           Run pip with the specified Python interpreter.
  -v, --verbose               Give more output. Option is additive, and can be
                              used up to 3 times.
  -V, --version               Show version and exit.
  -q, --quiet                 Give less output. Option is additive, and can be
                              used up to 3 times (corresponding to WARNING,
                              ERROR, and CRITICAL logging levels).
  --log <path>                Path to a verbose appending log.
  --no-input                  Disable prompting for input.
  --keyring-provider <keyring_provider>
                              Enable the credential lookup via the keyring
                              library if user input is allowed. Specify which
                              mechanism to use [auto, disabled, import,
                              subprocess]. (default: auto)
  --proxy <proxy>             Specify a proxy in the form
                              scheme://[user:passwd@]proxy.server:port.
  --retries <retries>         Maximum attempts to establish a new HTTP
                              connection. (default: 5)
  --timeout <sec>             Set the socket timeout (default 15 seconds).
  --exists-action <action>    Default action when a path already exists:
                              (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.
  --trusted-host <hostname>   Mark this host or host:port pair as trusted,
                              even though it does not have valid or any HTTPS.
  --cert <path>               Path to PEM-encoded CA certificate bundle. If
                              provided, overrides the default. See 'SSL
                              Certificate Verification' in pip documentation
                              for more information.
  --client-cert <path>        Path to SSL client certificate, a single file
                              containing the private key and the certificate
                              in PEM format.
  --cache-dir <dir>           Store the cache data in <dir>.
  --no-cache-dir              Disable the cache.
  --disable-pip-version-check
                              Don't periodically check PyPI to determine
                              whether a new version of pip is available for
                              download. Implied with --no-index.
  --no-color                  Suppress colored output.
  --use-feature <feature>     Enable new functionality, that may be backward
                              incompatible.
  --use-deprecated <feature>  Enable deprecated functionality, that will be
                              removed in the future.
  --resume-retries <resume_retries>
                              Maximum attempts to resume or restart an
                              incomplete download. (default: 5), and run the service manually with . The user is currently on the VPS, ready to execute these manual instructions. The FIDUS backend has already been prepared to communicate with this service once it's live.
</current_work>

<optional_next_step>
Guide the user through the manual setup of the MT5 bridge service on the Windows VPS and then perform an end-to-end connectivity test from the main FIDUS backend to confirm the integration is fully operational.
</optional_next_step>
