#!/usr/bin/env python3
"""
Update FIDUS Backend MT5 Configuration
Updates the backend .env file with MT5 bridge service configuration
"""

import os
import sys
from pathlib import Path

def update_backend_config():
    """Update backend .env with MT5 bridge configuration"""
    
    print("üîß FIDUS Backend MT5 Configuration Updater")
    print("=" * 60)
    
    # Default values (user will get these from VPS setup)
    default_values = {
        'MT5_BRIDGE_URL': 'http://217.197.163.11:8000',
        'MT5_BRIDGE_API_KEY': 'FIDUS-MT5-PROD-XXXXXX-XXXXXXXX',  # Will be generated by VPS script
        'MT5_BRIDGE_TIMEOUT': '30',
        'MT5_ENCRYPTION_KEY': 'CHANGE-THIS-TO-GENERATED-KEY'     # Will be generated by VPS script
    }
    
    # Get user input
    print("\nüìù Enter the values from your VPS setup:")
    print("(These should match the values generated by setup_mt5_bridge.ps1)")
    print()
    
    config = {}
    
    # VPS IP (usually static)
    vps_ip = input(f"VPS IP Address [{default_values['MT5_BRIDGE_URL'].split('//')[1].split(':')[0]}]: ").strip()
    if not vps_ip:
        vps_ip = default_values['MT5_BRIDGE_URL'].split('//')[1].split(':')[0]
    
    config['MT5_BRIDGE_URL'] = f"http://{vps_ip}:8000"
    
    # API Key (generated by VPS script)
    api_key = input("MT5 Bridge API Key (from VPS .env file): ").strip()
    if not api_key:
        print("‚ùå API Key is required! Check your VPS .env file for MT5_BRIDGE_API_KEY")
        return False
    
    config['MT5_BRIDGE_API_KEY'] = api_key
    
    # Encryption Key (generated by VPS script) 
    encryption_key = input("MT5 Encryption Key (from VPS .env file): ").strip()
    if not encryption_key:
        print("‚ùå Encryption Key is required! Check your VPS .env file for MT5_ENCRYPTION_KEY")
        return False
        
    config['MT5_ENCRYPTION_KEY'] = encryption_key
    
    # Timeout (optional)
    timeout = input(f"Connection Timeout [{default_values['MT5_BRIDGE_TIMEOUT']}]: ").strip()
    config['MT5_BRIDGE_TIMEOUT'] = timeout or default_values['MT5_BRIDGE_TIMEOUT']
    
    # Update .env file
    from path_utils import get_backend_path
    env_file = Path(get_backend_path(".env"))
    
    if not env_file.exists():
        print(f"‚ùå Backend .env file not found: {env_file}")
        return False
    
    print(f"\nüìÅ Updating {env_file}...")
    
    try:
        # Read existing .env file
        with open(env_file, 'r') as f:
            lines = f.readlines()
        
        # Update or add MT5 configuration
        updated_lines = []
        mt5_section_found = False
        updated_keys = set()
        
        for line in lines:
            line = line.strip()
            
            # Check if this is an MT5 config line
            if any(line.startswith(f"{key}=") for key in config.keys()):
                # Find which key this is
                for key, value in config.items():
                    if line.startswith(f"{key}="):
                        updated_lines.append(f"{key}={value}\n")
                        updated_keys.add(key)
                        break
            else:
                updated_lines.append(line + '\n' if line else '\n')
        
        # Add any missing keys
        if not mt5_section_found:
            updated_lines.append("\n# MT5 Bridge Service Configuration (Updated by script)\n")
        
        for key, value in config.items():
            if key not in updated_keys:
                updated_lines.append(f"{key}={value}\n")
        
        # Write updated .env file
        with open(env_file, 'w') as f:
            f.writelines(updated_lines)
        
        print("‚úÖ Backend .env file updated successfully!")
        
        # Show summary
        print(f"\nüìä Configuration Summary:")
        for key, value in config.items():
            if 'KEY' in key:
                display_value = value[:20] + "..." if len(value) > 20 else value
            else:
                display_value = value
            print(f"   {key}: {display_value}")
        
        print(f"\nüîÑ Next Steps:")
        print(f"1. Restart FIDUS backend: sudo supervisorctl restart backend")
        print(f"2. Test MT5 connection from FIDUS admin panel")
        print(f"3. Verify bridge health: curl {config['MT5_BRIDGE_URL']}/health")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating .env file: {e}")
        return False

def test_configuration():
    """Test the MT5 configuration"""
    
    print(f"\nüß™ Testing MT5 Bridge Configuration...")
    
    try:
        # Test environment variables
        from dotenv import load_dotenv
        load_dotenv('/app/backend/.env')
        
        bridge_url = os.environ.get('MT5_BRIDGE_URL')
        api_key = os.environ.get('MT5_BRIDGE_API_KEY')
        encryption_key = os.environ.get('MT5_ENCRYPTION_KEY')
        
        if not all([bridge_url, api_key, encryption_key]):
            print("‚ùå Missing required MT5 configuration")
            return False
        
        print("‚úÖ Environment variables loaded correctly")
        
        # Test basic connectivity (without requiring authentication)
        import requests
        
        try:
            response = requests.get(f"{bridge_url}/", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Bridge service is responding")
                data = response.json()
                print(f"   Service: {data.get('service')}")
                print(f"   Version: {data.get('version')}")
            else:
                print(f"‚ö†Ô∏è Bridge service responded with status {response.status_code}")
        
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è Could not connect to bridge service: {e}")
            print("   This is normal if VPS service is not running yet")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

if __name__ == "__main__":
    try:
        success = update_backend_config()
        
        if success:
            test_configuration()
            
            print(f"\n" + "=" * 60)
            print("üéâ MT5 Configuration Update Complete!")
            print("=" * 60)
            print("‚úÖ Backend .env updated with MT5 bridge configuration")
            print("üîÑ Remember to restart the backend service")
            print("üß™ Test the integration from FIDUS admin panel")
            
        else:
            print(f"\n‚ùå Configuration update failed")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n\n‚èπÔ∏è Configuration update cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)