#!/usr/bin/env python3
"""
Google OAuth Flow End-to-End Test

CRITICAL TESTING TASK: Google OAuth Flow End-to-End Test

CONTEXT:
Just fixed Google OAuth callback issues:
1. Fixed frontend Authorization header handling (App.js)
2. Fixed redirect URI mismatch between GoogleOAuthService and IndividualGoogleOAuth
3. Added comprehensive logging to callback endpoint

TEST OBJECTIVE:
Verify the OAuth callback endpoint `/api/admin/google/individual-callback` is working correctly.

TEST STEPS:
1. Admin Login Test
2. Generate OAuth URL Test
3. Check OAuth State Storage
4. Check Backend Logs
5. Simulate OAuth Callback (WITHOUT actual Google auth - just test endpoint responsiveness)

SUCCESS CRITERIA:
‚úÖ Admin login returns valid JWT token
‚úÖ OAuth URL generation works with proper redirect URI
‚úÖ State is stored in MongoDB
‚úÖ Callback endpoint is reachable and logging is active
‚úÖ No redirect URI mismatches in logs
"""

import requests
import json
import sys
import os
from datetime import datetime
import pymongo
from pymongo import MongoClient
import subprocess

# Backend URL from environment
BACKEND_URL = "https://fidus-invest.emergent.host"

# Admin credentials
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "password123"

# MongoDB connection
MONGO_URL = "mongodb+srv://chavapalmarubin_db_user:2170Tenoch!@fidus.y1p9be2.mongodb.net/fidus_production?retryWrites=true&w=majority"

class GoogleOAuthFlowTest:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.test_results = []
        self.mongo_client = None
        self.db = None
        
    def log_test(self, test_name, success, details):
        """Log test results"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        self.test_results.append({
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        print()
    
    def connect_to_mongodb(self):
        """Connect to MongoDB to check OAuth state storage"""
        try:
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client['fidus_production']
            
            # Test connection
            self.mongo_client.admin.command('ping')
            self.log_test("MongoDB Connection", True, "Successfully connected to MongoDB")
            return True
            
        except Exception as e:
            self.log_test("MongoDB Connection", False, f"Failed to connect: {str(e)}")
            return False
    
    def test_admin_login(self):
        """Test Step 1: Admin Login Test"""
        try:
            auth_url = f"{BACKEND_URL}/api/auth/login"
            payload = {
                "username": ADMIN_USERNAME,
                "password": ADMIN_PASSWORD,
                "user_type": "admin"
            }
            
            print(f"üîê Testing admin login at: {auth_url}")
            print(f"   Credentials: {ADMIN_USERNAME} / {ADMIN_PASSWORD}")
            
            response = self.session.post(auth_url, json=payload)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('token')
                if self.token:
                    self.session.headers.update({'Authorization': f'Bearer {self.token}'})
                    self.log_test("Admin Login", True, f"Successfully authenticated as {ADMIN_USERNAME}, JWT token obtained")
                    print(f"   JWT Token: {self.token[:50]}...")
                    return True
                else:
                    self.log_test("Admin Login", False, "No token in response")
                    return False
            else:
                self.log_test("Admin Login", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("Admin Login", False, f"Exception: {str(e)}")
            return False
    
    def test_oauth_url_generation(self):
        """Test Step 2: Generate OAuth URL Test"""
        try:
            oauth_url = f"{BACKEND_URL}/api/auth/google/url"
            
            print(f"üîó Testing OAuth URL generation at: {oauth_url}")
            
            response = self.session.get(oauth_url)
            
            if response.status_code == 200:
                data = response.json()
                
                # Check if success is true
                success = data.get('success', False)
                if not success:
                    self.log_test("OAuth URL Generation Success", False, f"Response success=false: {data}")
                    return False
                
                # Extract auth_url
                auth_url = data.get('auth_url', '')
                if not auth_url:
                    self.log_test("OAuth URL Generation", False, "No auth_url in response")
                    return False
                
                self.log_test("OAuth URL Generation Success", True, "OAuth URL generated successfully")
                
                # Verify auth_url contains admin_001: in state parameter
                if 'admin_001:' in auth_url:
                    self.log_test("OAuth State Parameter", True, "auth_url contains 'admin_001:' in state parameter")
                else:
                    self.log_test("OAuth State Parameter", False, "auth_url does NOT contain 'admin_001:' in state parameter")
                
                # Verify redirect_uri is correct
                expected_redirect_uri = "https://fidus-invest.emergent.host/admin/google-callback"
                if expected_redirect_uri in auth_url:
                    self.log_test("OAuth Redirect URI", True, f"Correct redirect URI found: {expected_redirect_uri}")
                else:
                    self.log_test("OAuth Redirect URI", False, f"Expected redirect URI not found. Auth URL: {auth_url}")
                
                print(f"   Generated Auth URL: {auth_url[:100]}...")
                return True
                
            else:
                self.log_test("OAuth URL Generation", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("OAuth URL Generation", False, f"Exception: {str(e)}")
            return False
    
    def test_oauth_state_storage(self):
        """Test Step 3: Check OAuth State Storage"""
        try:
            if self.db is None:
                self.log_test("OAuth State Storage", False, "MongoDB connection not available")
                return False
            
            print(f"üóÑÔ∏è Checking OAuth state storage in MongoDB...")
            
            # Find latest oauth_states entry for admin_001
            state_doc = self.db.oauth_states.find_one(
                {"user_id": "admin_001"}, 
                sort=[("created_at", -1)]
            )
            
            if state_doc:
                state_value = state_doc.get('state', '')
                created_at = state_doc.get('created_at', '')
                
                self.log_test("OAuth State Storage", True, f"OAuth state stored: {state_value[:30]}... (created: {created_at})")
                
                # Check if state was created recently (within last 5 minutes)
                if isinstance(created_at, datetime):
                    time_diff = datetime.now() - created_at.replace(tzinfo=None)
                    if time_diff.total_seconds() < 300:  # 5 minutes
                        self.log_test("OAuth State Freshness", True, f"State created {time_diff.total_seconds():.0f} seconds ago")
                    else:
                        self.log_test("OAuth State Freshness", False, f"State is old: {time_diff.total_seconds():.0f} seconds ago")
                
                return True
            else:
                self.log_test("OAuth State Storage", False, "No OAuth state found for admin_001")
                
                # Check if there are any oauth_states at all
                total_states = self.db.oauth_states.count_documents({})
                self.log_test("OAuth States Collection", total_states > 0, f"Total OAuth states in collection: {total_states}")
                
                return False
                
        except Exception as e:
            self.log_test("OAuth State Storage", False, f"Exception: {str(e)}")
            return False
    
    def test_backend_logs(self):
        """Test Step 4: Check Backend Logs"""
        try:
            print(f"üìã Checking backend logs for OAuth and Google entries...")
            
            # Check backend logs for OAuth/Google entries
            log_command = "tail -n 100 /var/log/supervisor/backend.err.log | grep -i 'oauth\\|google'"
            
            try:
                result = subprocess.run(log_command, shell=True, capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0 and result.stdout.strip():
                    log_lines = result.stdout.strip().split('\n')
                    
                    # Look for specific log entries
                    oauth_service_init = any('Google OAuth Service initialized' in line for line in log_lines)
                    oauth_errors = any('error' in line.lower() for line in log_lines)
                    
                    if oauth_service_init:
                        self.log_test("Google OAuth Service Initialization", True, "Found 'Google OAuth Service initialized' in logs")
                    else:
                        self.log_test("Google OAuth Service Initialization", False, "Did not find 'Google OAuth Service initialized' in logs")
                    
                    if not oauth_errors:
                        self.log_test("OAuth Error Check", True, "No OAuth errors found in recent logs")
                    else:
                        error_lines = [line for line in log_lines if 'error' in line.lower()]
                        self.log_test("OAuth Error Check", False, f"Found OAuth errors: {error_lines[:3]}")
                    
                    print(f"   Found {len(log_lines)} OAuth/Google log entries")
                    for line in log_lines[-5:]:  # Show last 5 entries
                        print(f"   LOG: {line}")
                    
                    return True
                else:
                    self.log_test("Backend Logs Check", False, "No OAuth/Google entries found in backend logs")
                    return False
                    
            except subprocess.TimeoutExpired:
                self.log_test("Backend Logs Check", False, "Log check timed out")
                return False
            except Exception as log_error:
                self.log_test("Backend Logs Check", False, f"Log check failed: {str(log_error)}")
                return False
                
        except Exception as e:
            self.log_test("Backend Logs Check", False, f"Exception: {str(e)}")
            return False
    
    def test_oauth_callback_endpoint(self):
        """Test Step 5: Simulate OAuth Callback (WITHOUT actual Google auth)"""
        try:
            callback_url = f"{BACKEND_URL}/api/admin/google/individual-callback"
            
            print(f"üîÑ Testing OAuth callback endpoint at: {callback_url}")
            
            # Test with fake code and state to see error handling
            payload = {
                "code": "test_code",
                "state": "admin_001:test_state_token"
            }
            
            response = self.session.post(callback_url, json=payload)
            
            # We expect this to fail with a specific error (not 404 or 500)
            if response.status_code == 404:
                self.log_test("OAuth Callback Endpoint Reachability", False, "Endpoint returns 404 - not found")
                return False
            elif response.status_code == 500:
                # Check if it's a proper error or a crash
                try:
                    error_data = response.json()
                    if 'error' in error_data or 'detail' in error_data:
                        self.log_test("OAuth Callback Endpoint Reachability", True, "Endpoint reachable but returns expected error for invalid token")
                        self.log_test("OAuth Callback Error Handling", True, f"Proper error response: {error_data}")
                    else:
                        self.log_test("OAuth Callback Endpoint Reachability", False, f"Endpoint crashes with 500: {response.text}")
                        return False
                except:
                    self.log_test("OAuth Callback Endpoint Reachability", False, f"Endpoint crashes with 500: {response.text}")
                    return False
            else:
                # Any other status code means the endpoint is working
                try:
                    response_data = response.json()
                    self.log_test("OAuth Callback Endpoint Reachability", True, f"Endpoint reachable (HTTP {response.status_code})")
                    
                    # Check if logging is active by looking for expected error messages
                    if 'error' in response_data or 'invalid' in str(response_data).lower():
                        self.log_test("OAuth Callback Logging Active", True, "Endpoint returns proper error messages indicating logging is active")
                    else:
                        self.log_test("OAuth Callback Logging Active", False, f"Unexpected response: {response_data}")
                    
                except:
                    self.log_test("OAuth Callback Endpoint Reachability", True, f"Endpoint reachable but non-JSON response (HTTP {response.status_code})")
            
            # Check backend logs for callback activity
            try:
                log_command = "tail -n 20 /var/log/supervisor/backend.err.log | grep -i 'individual.*google.*oauth.*callback'"
                result = subprocess.run(log_command, shell=True, capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0 and result.stdout.strip():
                    self.log_test("OAuth Callback Logging Verification", True, "Found 'Individual Google OAuth callback' in logs")
                else:
                    self.log_test("OAuth Callback Logging Verification", False, "Did not find callback logging in recent logs")
            except:
                self.log_test("OAuth Callback Logging Verification", False, "Could not check callback logs")
            
            return True
                
        except Exception as e:
            self.log_test("OAuth Callback Endpoint Test", False, f"Exception: {str(e)}")
            return False
    
    def run_oauth_flow_test(self):
        """Run complete Google OAuth flow end-to-end test"""
        print("üîç GOOGLE OAUTH FLOW END-TO-END TEST")
        print("=" * 80)
        print(f"Backend URL: {BACKEND_URL}")
        print(f"Test Time: {datetime.now().isoformat()}")
        print()
        
        # Step 1: Connect to MongoDB
        print("üìã STEP 1: Connect to MongoDB")
        mongodb_success = self.connect_to_mongodb()
        print()
        
        # Step 2: Admin Login Test
        print("üìã STEP 2: Admin Login Test")
        login_success = self.test_admin_login()
        if not login_success:
            print("‚ùå Admin login failed. Cannot proceed with OAuth tests.")
            return False
        print()
        
        # Step 3: Generate OAuth URL Test
        print("üìã STEP 3: Generate OAuth URL Test")
        oauth_url_success = self.test_oauth_url_generation()
        print()
        
        # Step 4: Check OAuth State Storage
        print("üìã STEP 4: Check OAuth State Storage")
        if mongodb_success:
            state_storage_success = self.test_oauth_state_storage()
        else:
            state_storage_success = False
            self.log_test("OAuth State Storage", False, "Skipped due to MongoDB connection failure")
        print()
        
        # Step 5: Check Backend Logs
        print("üìã STEP 5: Check Backend Logs")
        logs_success = self.test_backend_logs()
        print()
        
        # Step 6: Simulate OAuth Callback
        print("üìã STEP 6: Simulate OAuth Callback")
        callback_success = self.test_oauth_callback_endpoint()
        print()
        
        # Summary
        self.print_test_summary()
        
        # Return overall success
        critical_tests = [login_success, oauth_url_success, callback_success]
        return all(critical_tests)
    
    def print_test_summary(self):
        """Print test summary"""
        print("=" * 80)
        print("üìä GOOGLE OAUTH FLOW TEST SUMMARY")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result['success'])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"Total Tests: {total_tests}")
        print(f"Passed: {passed_tests}")
        print(f"Failed: {failed_tests}")
        print(f"Success Rate: {success_rate:.1f}%")
        print()
        
        # Success Criteria Check
        print("üéØ SUCCESS CRITERIA STATUS:")
        
        admin_login_success = any('Admin Login' in r['test'] and r['success'] for r in self.test_results)
        oauth_url_success = any('OAuth URL Generation Success' in r['test'] and r['success'] for r in self.test_results)
        state_storage_success = any('OAuth State Storage' in r['test'] and r['success'] for r in self.test_results)
        callback_reachable = any('OAuth Callback Endpoint Reachability' in r['test'] and r['success'] for r in self.test_results)
        no_redirect_mismatch = any('OAuth Redirect URI' in r['test'] and r['success'] for r in self.test_results)
        
        print(f"   {'‚úÖ' if admin_login_success else '‚ùå'} Admin login returns valid JWT token")
        print(f"   {'‚úÖ' if oauth_url_success else '‚ùå'} OAuth URL generation works with proper redirect URI")
        print(f"   {'‚úÖ' if state_storage_success else '‚ùå'} State is stored in MongoDB")
        print(f"   {'‚úÖ' if callback_reachable else '‚ùå'} Callback endpoint is reachable and logging is active")
        print(f"   {'‚úÖ' if no_redirect_mismatch else '‚ùå'} No redirect URI mismatches in logs")
        
        print()
        
        if failed_tests > 0:
            print("‚ùå FAILED TESTS:")
            for result in self.test_results:
                if not result['success']:
                    print(f"   ‚Ä¢ {result['test']}: {result['details']}")
            print()
        
        print("‚úÖ PASSED TESTS:")
        for result in self.test_results:
            if result['success']:
                print(f"   ‚Ä¢ {result['test']}: {result['details']}")
        print()
        
        # Overall conclusion
        all_critical_passed = admin_login_success and oauth_url_success and callback_reachable
        
        print("üîç TEST CONCLUSIONS:")
        if all_critical_passed:
            print("   ‚úÖ OAUTH INFRASTRUCTURE READY: All critical OAuth components are working")
            print("   üéâ Backend is ready for live OAuth testing with actual Google authorization")
            
            if state_storage_success and no_redirect_mismatch:
                print("   üåü PERFECT SETUP: All OAuth components including state storage and redirect URIs are working correctly")
            else:
                if not state_storage_success:
                    print("   ‚ö†Ô∏è  State storage needs attention but core OAuth flow is functional")
                if not no_redirect_mismatch:
                    print("   ‚ö†Ô∏è  Redirect URI configuration needs verification")
        else:
            print("   ‚ùå OAUTH INFRASTRUCTURE ISSUES: Critical OAuth components need attention")
            
            if not admin_login_success:
                print("   üîß Admin authentication system needs fixing")
            if not oauth_url_success:
                print("   üîß OAuth URL generation system needs fixing")
            if not callback_reachable:
                print("   üîß OAuth callback endpoint needs fixing")
        
        print()
        print("üìã NEXT STEPS:")
        if all_critical_passed:
            print("   1. ‚úÖ Infrastructure verified - ready for live OAuth testing")
            print("   2. üîó Test with actual Google OAuth flow in browser")
            print("   3. üìß Verify Gmail, Calendar, and Drive integration after OAuth")
        else:
            print("   1. üîß Fix failed infrastructure components")
            print("   2. üîÑ Re-run this test to verify fixes")
            print("   3. üìã Only proceed to live OAuth testing after all tests pass")
        
        print()

def main():
    """Main test execution"""
    tester = GoogleOAuthFlowTest()
    success = tester.run_oauth_flow_test()
    
    # Exit with appropriate code
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()